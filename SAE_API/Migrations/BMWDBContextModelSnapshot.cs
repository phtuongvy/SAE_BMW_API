// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAE_API.Models.EntityFramework;

#nullable disable

namespace SAE_API.Migrations
{
    [DbContext(typeof(BMWDBContext))]
    partial class BMWDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SAE_API.Models.EntityFramework.AChoisi", b =>
                {
                    b.Property<int>("IDPack")
                        .HasColumnType("integer")
                        .HasColumnName("ach_idpack")
                        .HasColumnOrder(0);

                    b.Property<int>("IDConfigurationMoto")
                        .HasColumnType("integer")
                        .HasColumnName("ach_idconfigurationmoto")
                        .HasColumnOrder(1);

                    b.HasKey("IDPack", "IDConfigurationMoto")
                        .HasName("pk_achoisi");

                    b.HasIndex("IDConfigurationMoto");

                    b.ToTable("t_j_achoisi_ach");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.AChoisiOption", b =>
                {
                    b.Property<int>("IdConfigurationMoto")
                        .HasColumnType("integer")
                        .HasColumnName("aco_idconfigurationmoto")
                        .HasColumnOrder(0);

                    b.Property<int>("IdEquipementMoto")
                        .HasColumnType("integer")
                        .HasColumnName("aco_idequipementmoto")
                        .HasColumnOrder(1);

                    b.HasKey("IdConfigurationMoto", "IdEquipementMoto")
                        .HasName("pk_achoisioption");

                    b.HasIndex("IdEquipementMoto");

                    b.ToTable("t_e_achoisioption_aco");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Acquerir", b =>
                {
                    b.Property<int>("IdCb")
                        .HasColumnType("integer")
                        .HasColumnName("acq_idcb")
                        .HasColumnOrder(0);

                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("acq_idcompteclient")
                        .HasColumnOrder(1);

                    b.HasKey("IdCb", "IdCompteClient")
                        .HasName("pk_acquerir");

                    b.HasIndex("IdCompteClient");

                    b.ToTable("t_j_acquerir_acq");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Adresse", b =>
                {
                    b.Property<int>("IdAdresse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ads_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAdresse"));

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ads_codepostal");

                    b.Property<int?>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("ads_idcompteclient");

                    b.Property<int?>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("ads_idconcessionnaire");

                    b.Property<int?>("Numero")
                        .HasColumnType("integer")
                        .HasColumnName("ads_numero");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ads_pays");

                    b.Property<string>("RueClient")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ads_rueclient");

                    b.Property<string>("TypeAdresse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ads_typeadresse");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ads_ville");

                    b.HasKey("IdAdresse")
                        .HasName("pk_adresse");

                    b.HasIndex("IdCompteClient")
                        .IsUnique();

                    b.ToTable("t_e_adresse_ads");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.APourCouleur", b =>
                {
                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("apc_idequipement")
                        .HasColumnOrder(0);

                    b.Property<int>("IdCouleurEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("apc_idcouleurequipement")
                        .HasColumnOrder(1);

                    b.HasKey("IdEquipement", "IdCouleurEquipement")
                        .HasName("pk_a_pour_couleur");

                    b.HasIndex("IdCouleurEquipement");

                    b.ToTable("t_j_apourcouleur_apc");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.APourTaille", b =>
                {
                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("apt_idequipement");

                    b.Property<int>("IdTailleEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("apt_idtailleequipement");

                    b.HasKey("IdEquipement", "IdTailleEquipement")
                        .HasName("pk_a_pour_taille");

                    b.HasIndex("IdTailleEquipement");

                    b.ToTable("t_e_apourtaille_apt");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.APourValeur", b =>
                {
                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("apv_idmoto")
                        .HasColumnOrder(0);

                    b.Property<int>("IdCaracteristiqueMoto")
                        .HasColumnType("integer")
                        .HasColumnName("apv_idcaracteristiquemoto")
                        .HasColumnOrder(1);

                    b.HasKey("IdMoto", "IdCaracteristiqueMoto")
                        .HasName("pk_apourvaleur");

                    b.HasIndex("IdCaracteristiqueMoto");

                    b.ToTable("t_e_apourvaleur_apv");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CaracteristiqueMoto", b =>
                {
                    b.Property<int>("IdCaracteristiqueMoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("crm_idcaracteristiquemoto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCaracteristiqueMoto"));

                    b.Property<int>("IdCategorieCaracteristiqueMoto")
                        .HasColumnType("integer")
                        .HasColumnName("crm_idcategoriecaracteristiquemoto");

                    b.Property<string>("NomCaracteristiqueMoto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("crm_nomcaracteristiquemoto");

                    b.Property<string>("ValeurCaracteristiqueMoto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("crm_valeurcaracteristiquemoto");

                    b.HasKey("IdCaracteristiqueMoto")
                        .HasName("pk_caracteristiquemoto");

                    b.HasIndex("IdCategorieCaracteristiqueMoto");

                    b.ToTable("t_e_caracteristiquemoto_crm", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CarteBancaire", b =>
                {
                    b.Property<int>("IdCb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cbt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCb"));

                    b.Property<int?>("AnneeExpiration")
                        .HasColumnType("integer")
                        .HasColumnName("cbt_anneeexpiration");

                    b.Property<string>("CryptoCb")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cbt_cryptocb");

                    b.Property<int?>("MoisExpiration")
                        .HasColumnType("integer")
                        .HasColumnName("cbt_moisexpiration");

                    b.Property<string>("NomCarte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cbt_nomcarte");

                    b.Property<string>("NumeroCb")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cbt_numerocb");

                    b.HasKey("IdCb")
                        .HasName("pk_cartebancaire");

                    b.ToTable("t_e_cartebancaire_cbt", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CategorieCaracteristiqueMoto", b =>
                {
                    b.Property<int>("IdCategorieCaracteristiqueMoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ccm_idcategoriecaracteristiquemoto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategorieCaracteristiqueMoto"));

                    b.Property<string>("NomCategorieCaracteristiqueMoto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ccm_nomcategoriecaracteristiquemoto");

                    b.HasKey("IdCategorieCaracteristiqueMoto")
                        .HasName("pk_categoriecaracteristiquemot");

                    b.ToTable("t_e_categoriecaracteristiquemoto_ccm", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Collection", b =>
                {
                    b.Property<int>("IdCollection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clt_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCollection"));

                    b.Property<string>("NomCollection")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("clt_nomcollection");

                    b.HasKey("IdCollection")
                        .HasName("pk_collection");

                    b.ToTable("t_e_collection_clt", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Coloris", b =>
                {
                    b.Property<int>("IdColoris")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("col_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdColoris"));

                    b.Property<string>("DescriptionColoris")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("col_descriptioncoloris");

                    b.Property<int>("IdPhoto")
                        .HasColumnType("integer")
                        .HasColumnName("col_idphoto");

                    b.Property<string>("NomColoris")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("col_nomcoloris");

                    b.Property<decimal?>("PrixColoris")
                        .HasColumnType("numeric")
                        .HasColumnName("col_prixcoloris");

                    b.Property<int>("TypeColoris")
                        .HasColumnType("integer")
                        .HasColumnName("col_typecoloris");

                    b.HasKey("IdColoris")
                        .HasName("pk_t_e_coloris_col");

                    b.HasIndex("IdPhoto")
                        .IsUnique();

                    b.ToTable("t_e_coloris_col", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Commande", b =>
                {
                    b.Property<int>("IdCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cmd_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCommande"));

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("date")
                        .HasColumnName("cmd_date");

                    b.Property<decimal?>("PrixFraisLivraison")
                        .HasColumnType("numeric")
                        .HasColumnName("cmd_prixfraislivraison");

                    b.Property<decimal?>("PrixTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("cmd_prixtotal");

                    b.HasKey("IdCommande")
                        .HasName("pk_commande");

                    b.ToTable("t_e_commande_cmd", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Commander", b =>
                {
                    b.Property<int>("IdCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cmdr_idcommande");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCommande"));

                    b.Property<int?>("IdConfigurationMoto")
                        .HasColumnType("integer")
                        .HasColumnName("cmdr_idconfigurationmoto");

                    b.Property<int?>("IdEquipement")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("cmdr_idequipement");

                    b.Property<int?>("QteCommande")
                        .HasColumnType("integer")
                        .HasColumnName("cmdr_qtecommande");

                    b.HasKey("IdCommande")
                        .HasName("pk_commander");

                    b.HasIndex("IdConfigurationMoto")
                        .IsUnique();

                    b.HasIndex("IdEquipement");

                    b.ToTable("t_e_commander_cmdr", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CompteAdmin", b =>
                {
                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("cad_idcompteclient");

                    b.HasKey("IdCompteClient")
                        .HasName("pk_compteadmin");

                    b.ToTable("t_e_compteadmin_cad", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CompteClient", b =>
                {
                    b.Property<int>("IdCompteClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ccl_idcompteclient");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCompteClient"));

                    b.Property<string>("CiviliteClient")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("ccl_civiliteclient");

                    b.Property<string>("ClientRole")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ccl_clientrole");

                    b.Property<DateTime?>("DatenaissanceClient")
                        .HasColumnType("date")
                        .HasColumnName("ccl_datenaissanceclient");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ccl_email");

                    b.Property<string>("NomClient")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ccl_nomclient");

                    b.Property<string>("NumeroClient")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ccl_numeroclient");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea")
                        .HasColumnName("ccl_password");

                    b.Property<string>("PrenomClient")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ccl_prenomclient");

                    b.HasKey("IdCompteClient")
                        .HasName("pk_compteclient");

                    b.ToTable("t_e_compteclient_ccl", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CompteClientPrive", b =>
                {
                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("cpp_idcompteclient");

                    b.HasKey("IdCompteClient")
                        .HasName("pk_t_e_compteclientprive_cpp");

                    b.ToTable("t_e_compteclientprive_cpp", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CompteClientProfessionnel", b =>
                {
                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("cpp_idcompteclient");

                    b.Property<string>("NomCompagnie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cpp_nomcompagnie");

                    b.HasKey("IdCompteClient")
                        .HasName("pk_compteclientprofessionnel");

                    b.ToTable("t_e_compteclientprofessionnel_cpp", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Concessionnaire", b =>
                {
                    b.Property<int>("IdConcessionnaire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("csn_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdConcessionnaire"));

                    b.Property<int>("IdAdresse")
                        .HasColumnType("integer")
                        .HasColumnName("csn_idadresse");

                    b.Property<int>("IdStock")
                        .HasColumnType("integer")
                        .HasColumnName("csn_idstock");

                    b.Property<string>("NomConcessionnaire")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("csn_nom");

                    b.HasKey("IdConcessionnaire")
                        .HasName("pk_concessionnaire");

                    b.HasIndex("IdAdresse");

                    b.HasIndex("IdStock");

                    b.ToTable("t_e_concessionnaire_csn", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.ConfigurationMoto", b =>
                {
                    b.Property<int>("IdConfigurationMoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cfm_idconfigurationmoto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdConfigurationMoto"));

                    b.Property<DateTime?>("DateConfiguration")
                        .HasColumnType("date")
                        .HasColumnName("cfm_dateconfiguration");

                    b.Property<int?>("IdColoris")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("cfm_idcoloris");

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("cfm_idmoto");

                    b.Property<int?>("IdReservationOffre")
                        .HasColumnType("integer")
                        .HasColumnName("cfm_idreservationoffre");

                    b.Property<decimal?>("PrixTotalConfiguration")
                        .HasColumnType("numeric")
                        .HasColumnName("cfm_prixtotalconfiguration");

                    b.HasKey("IdConfigurationMoto")
                        .HasName("pk_configurationmoto");

                    b.HasIndex("IdColoris");

                    b.HasIndex("IdMoto");

                    b.ToTable("t_e_configurationmoto_cfm", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CouleurEquipement", b =>
                {
                    b.Property<int>("IdCouleurEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ceq_idcouleurequipement");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCouleurEquipement"));

                    b.Property<string>("NomCouleurEquipement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ceq_nomcouleurequipement");

                    b.HasKey("IdCouleurEquipement")
                        .HasName("pk_t_e_couleurequipement_ceq");

                    b.ToTable("t_e_couleurequipement_ceq", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.DateLivraison", b =>
                {
                    b.Property<int>("IdDateLivraison")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dlv_iddatelivraison");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDateLivraison"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("dlv_date");

                    b.HasKey("IdDateLivraison")
                        .HasName("pk_datelivraison");

                    b.ToTable("t_e_datelivraison_dlv", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.DemanderContact", b =>
                {
                    b.Property<int>("IdReservationOffre")
                        .HasColumnType("integer")
                        .HasColumnName("dmc_idreservationoffre");

                    b.Property<string>("Objet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("dmc_objet");

                    b.Property<string>("ObjetDeLaDemande")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dmc_objetdelademande");

                    b.HasKey("IdReservationOffre")
                        .HasName("pk_demandercontact");

                    b.ToTable("t_e_demandercontact_dmc", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Detient", b =>
                {
                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("det_idequipement")
                        .HasColumnOrder(0);

                    b.Property<int>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("det_idconcessionnaire")
                        .HasColumnOrder(1);

                    b.HasKey("IdEquipement", "IdConcessionnaire")
                        .HasName("pk_detient");

                    b.HasIndex("IdConcessionnaire");

                    b.ToTable("t_e_detient_det", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Disposer", b =>
                {
                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("dsp_idequipement")
                        .HasColumnOrder(1);

                    b.Property<int>("IdStock")
                        .HasColumnType("integer")
                        .HasColumnName("dsp_idstock")
                        .HasColumnOrder(0);

                    b.Property<int?>("QuantiteStock")
                        .HasColumnType("integer")
                        .HasColumnName("dsp_quantitestock");

                    b.HasKey("IdEquipement", "IdStock")
                        .HasName("pk_disposer");

                    b.HasIndex("IdStock");

                    b.ToTable("t_e_disposer_dsp", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.DonneesConstante", b =>
                {
                    b.Property<int>("IdDonnesConstante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dnc_iddonneesconstante");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDonnesConstante"));

                    b.Property<decimal?>("FraisLivraisonCommande")
                        .HasColumnType("numeric")
                        .HasColumnName("dnc_fraislivraisoncommande");

                    b.Property<decimal?>("TVAIntermediaire")
                        .HasColumnType("numeric")
                        .HasColumnName("dnc_tvaintermediaire");

                    b.Property<decimal?>("TVANormal")
                        .HasColumnType("numeric")
                        .HasColumnName("dnc_tvanormal");

                    b.Property<decimal?>("TVAParticulier")
                        .HasColumnType("numeric")
                        .HasColumnName("dnc_tvaparticulier");

                    b.Property<decimal?>("TVAReduit")
                        .HasColumnType("numeric")
                        .HasColumnName("dnc_tvareduit");

                    b.HasKey("IdDonnesConstante")
                        .HasName("pk_donneesconstante");

                    b.ToTable("t_e_donneesconstante_dnc", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Effectuer", b =>
                {
                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("eff_idcompteclient")
                        .HasColumnOrder(0);

                    b.Property<int>("IdCommande")
                        .HasColumnType("integer")
                        .HasColumnName("eff_idcommande")
                        .HasColumnOrder(1);

                    b.HasKey("IdCompteClient", "IdCommande")
                        .HasName("PK_effectuer");

                    b.HasIndex("IdCommande");

                    b.ToTable("t_e_effectuer_eff", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Enregistrer", b =>
                {
                    b.Property<int>("IdConfigurationMoto")
                        .HasColumnType("integer")
                        .HasColumnName("enr_idconfigurationmoto")
                        .HasColumnOrder(0);

                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("enr_idcompteclient")
                        .HasColumnOrder(1);

                    b.Property<string>("NomConfiguration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("enr_nomconfiguration");

                    b.HasKey("IdConfigurationMoto", "IdCompteClient")
                        .HasName("PK_ENREGISTRER");

                    b.HasIndex("IdCompteClient");

                    b.ToTable("t_e_enregistrer_enr");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Equipement", b =>
                {
                    b.Property<int>("IdEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("eqp_idequipement");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEquipement"));

                    b.Property<string>("DescriptionEquipement")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("eqp_descriptionequipement");

                    b.Property<string>("DetailEquipement")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("eqp_detailequipement");

                    b.Property<string>("DureeEquipement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eqp_dureeequipement");

                    b.Property<int>("IdCollection")
                        .HasColumnType("integer")
                        .HasColumnName("eqp_idcollection");

                    b.Property<int>("IdSegment")
                        .HasColumnType("integer")
                        .HasColumnName("eqp_idsegment");

                    b.Property<int>("IdTypeEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("eqp_idtypeequipement");

                    b.Property<string>("NomEquipement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eqp_nomequipement");

                    b.Property<decimal?>("PrixEquipement")
                        .HasColumnType("numeric")
                        .HasColumnName("eqp_prixequipement");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("eqp_sexe");

                    b.HasKey("IdEquipement")
                        .HasName("PK_EQUIPEMENT");

                    b.HasIndex("IdCollection");

                    b.HasIndex("IdSegment");

                    b.HasIndex("IdTypeEquipement");

                    b.ToTable("t_e_equipement_eqp");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EquipementAccessoire", b =>
                {
                    b.Property<int>("IdEquipementMoto")
                        .HasColumnType("integer")
                        .HasColumnName("eqa_idequipementmoto");

                    b.HasKey("IdEquipementMoto")
                        .HasName("pk_equipementaccessoire");

                    b.ToTable("t_e_equipementaccessoire_eqa", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EquipementMotoOption", b =>
                {
                    b.Property<int>("IdEquipementMoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("eqm_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEquipementMoto"));

                    b.Property<string>("DescriptionEquipementMoto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("eqm_descriptionequipementmoto");

                    b.Property<bool?>("EquipementOrigine")
                        .HasColumnType("boolean")
                        .HasColumnName("eqm_equipementorigine");

                    b.Property<int?>("IdPhoto")
                        .HasColumnType("integer")
                        .HasColumnName("eqm_idphoto");

                    b.Property<string>("NomEquipement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("eqm_nomequipement");

                    b.Property<decimal?>("PrixEquipementMoto")
                        .HasColumnType("numeric")
                        .HasColumnName("eqm_prixequipementmoto");

                    b.HasKey("IdEquipementMoto")
                        .HasName("PK_EQUIPEMENTMOTOOPTION");

                    b.HasIndex("IdPhoto");

                    b.ToTable("t_e_equipementmotooption_eqm");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EquipementOption", b =>
                {
                    b.Property<int>("IdEquipementMoto")
                        .HasColumnType("integer")
                        .HasColumnName("eqo_idequipementmoto");

                    b.HasKey("IdEquipementMoto")
                        .HasName("pk_equipementoption");

                    b.ToTable("t_e_equipementoption_eqo", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EstDans", b =>
                {
                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("esd_idmoto")
                        .HasColumnOrder(0);

                    b.Property<int>("IdStock")
                        .HasColumnType("integer")
                        .HasColumnName("esd_idstock")
                        .HasColumnOrder(1);

                    b.Property<int?>("QuantiteStockDisponible")
                        .HasColumnType("integer")
                        .HasColumnName("esd_quantitestockdisponible");

                    b.Property<int?>("QuantiteStockMoto")
                        .HasColumnType("integer")
                        .HasColumnName("esd_quantitestockmoto");

                    b.HasKey("IdMoto", "IdStock")
                        .HasName("PK_ESTDANS");

                    b.HasIndex("IdStock");

                    b.ToTable("t_j_estdans_esd");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Estimer", b =>
                {
                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("est_idcompteclient")
                        .HasColumnOrder(0);

                    b.Property<int>("IdEstimationMoto")
                        .HasColumnType("integer")
                        .HasColumnName("est_idestimationmoto")
                        .HasColumnOrder(1);

                    b.Property<int>("IdMoyenDePaiement")
                        .HasColumnType("integer")
                        .HasColumnName("est_idmoyendepaiement")
                        .HasColumnOrder(2);

                    b.HasKey("IdCompteClient", "IdEstimationMoto", "IdMoyenDePaiement")
                        .HasName("PK_ESTIMER");

                    b.HasIndex("IdEstimationMoto")
                        .IsUnique();

                    b.HasIndex("IdMoyenDePaiement");

                    b.ToTable("t_e_estimer_est");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Favoris", b =>
                {
                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("fav_idcompteclient")
                        .HasColumnOrder(0);

                    b.Property<int>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("fav_idconcessionnaire")
                        .HasColumnOrder(1);

                    b.HasKey("IdCompteClient", "IdConcessionnaire")
                        .HasName("PK_FAVORIS");

                    b.HasIndex("IdConcessionnaire");

                    b.ToTable("t_e_favoris_fav");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.GammeMoto", b =>
                {
                    b.Property<int>("IdGammeMoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("gmm_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGammeMoto"));

                    b.Property<string>("NomGammeMoto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gmm_nom");

                    b.HasKey("IdGammeMoto")
                        .HasName("PK_GAMMEMOTO");

                    b.ToTable("t_e_gammemoto_gmm");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Illustrer", b =>
                {
                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("ilr_idmoto")
                        .HasColumnOrder(0);

                    b.Property<int>("IdPhoto")
                        .HasColumnType("integer")
                        .HasColumnName("ilr_idphoto")
                        .HasColumnOrder(1);

                    b.HasKey("IdMoto", "IdPhoto")
                        .HasName("PK_ILLUSTRER");

                    b.HasIndex("IdPhoto");

                    b.ToTable("t_j_illustrer_ilr");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Moto", b =>
                {
                    b.Property<int>("MotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mto_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MotoId"));

                    b.Property<string>("DescriptionMoto")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("mto_descriptionmoto");

                    b.Property<int>("IdGammeMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mto_idgammemoto");

                    b.Property<string>("NomMoto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mto_nommoto");

                    b.Property<decimal>("PrixMoto")
                        .HasColumnType("numeric")
                        .HasColumnName("mto_prixmoto");

                    b.HasKey("MotoId")
                        .HasName("PK_MOTO");

                    b.HasIndex("IdGammeMoto");

                    b.ToTable("t_e_moto_mto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.MotoDisponible", b =>
                {
                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("mtd_idmoto");

                    b.Property<decimal?>("PrixMoto")
                        .HasColumnType("numeric")
                        .HasColumnName("mtd_prixmoto");

                    b.HasKey("IdMoto")
                        .HasName("PK_MOTODISPONIBLE");

                    b.ToTable("t_e_motodisponible_mtd");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.MoyenDePaiement", b =>
                {
                    b.Property<int>("IdMoyenDePaiement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mdp_idmoyendepaiement");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMoyenDePaiement"));

                    b.Property<string>("LibelleMoyenDePaiement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mdp_libellemoyendepaiement");

                    b.HasKey("IdMoyenDePaiement")
                        .HasName("PK_MOYENDEPAIEMENT");

                    b.ToTable("t_e_moyendepaiement_mdp");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Pack", b =>
                {
                    b.Property<int>("PackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pck_idpack");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PackId"));

                    b.Property<int?>("ColorisId")
                        .HasColumnType("integer")
                        .HasColumnName("pck_idcoloris");

                    b.Property<string>("DescriptionPack")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("pck_descriptionpack");

                    b.Property<string>("NomPack")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("pck_nompack");

                    b.Property<decimal?>("PrixPack")
                        .HasColumnType("numeric")
                        .HasColumnName("pck_prixpack");

                    b.HasKey("PackId")
                        .HasName("PK_PACK");

                    b.ToTable("t_e_pack_pck");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PeutContenir", b =>
                {
                    b.Property<int>("IdColoris")
                        .HasColumnType("integer")
                        .HasColumnName("ptc_idcoloris")
                        .HasColumnOrder(0);

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("ptc_idmoto")
                        .HasColumnOrder(1);

                    b.HasKey("IdColoris", "IdMoto")
                        .HasName("PK_PEUTCONTENIR");

                    b.HasIndex("IdMoto");

                    b.ToTable("t_e_peutcontenir_ptc");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PeutEquiper", b =>
                {
                    b.Property<int>("IdPack")
                        .HasColumnType("integer")
                        .HasColumnName("peq_idpack")
                        .HasColumnOrder(0);

                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("peq_idmoto")
                        .HasColumnOrder(1);

                    b.HasKey("IdPack", "IdMoto")
                        .HasName("PK_PEUTEQUIPER");

                    b.HasIndex("IdMoto");

                    b.ToTable("t_e_peutequiper_peq");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PeutUtiliser", b =>
                {
                    b.Property<int>("IdPack")
                        .HasColumnType("integer")
                        .HasColumnName("put_idpack")
                        .HasColumnOrder(0);

                    b.Property<int>("IdEquipementMoto")
                        .HasColumnType("integer")
                        .HasColumnName("put_idequipementmoto")
                        .HasColumnOrder(1);

                    b.HasKey("IdPack", "IdEquipementMoto")
                        .HasName("PK_PEUTUTILISER");

                    b.HasIndex("IdEquipementMoto");

                    b.ToTable("t_e_peututiliser_put");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pho_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("LienPhoto")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("pho_lienphoto");

                    b.HasKey("PhotoId")
                        .HasName("PK_PHOTO");

                    b.ToTable("t_e_photo_pho", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Posseder", b =>
                {
                    b.Property<int>("IdMoto")
                        .HasColumnType("integer")
                        .HasColumnName("pos_idmoto")
                        .HasColumnOrder(0);

                    b.Property<int>("IdEquipementMoto")
                        .HasColumnType("integer")
                        .HasColumnName("pos_idequipementmoto")
                        .HasColumnOrder(1);

                    b.HasKey("IdMoto", "IdEquipementMoto")
                        .HasName("PK_POSSEDER");

                    b.HasIndex("IdEquipementMoto");

                    b.ToTable("t_e_posseder_pos");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Presente", b =>
                {
                    b.Property<int>("IdPhoto")
                        .HasColumnType("integer")
                        .HasColumnName("pre_idphoto")
                        .HasColumnOrder(0);

                    b.Property<int>("IdEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("pre_idequipement")
                        .HasColumnOrder(1);

                    b.Property<int>("IdCouleurEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("pre_idcouleurequipement")
                        .HasColumnOrder(2);

                    b.HasKey("IdPhoto", "IdEquipement", "IdCouleurEquipement")
                        .HasName("PK_PRESENTE");

                    b.HasIndex("IdCouleurEquipement");

                    b.HasIndex("IdEquipement");

                    b.ToTable("t_e_presente_pre");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PriseRendezvous", b =>
                {
                    b.Property<int>("IdReservationOffre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prv_idreservationoffre");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdReservationOffre"));

                    b.Property<string>("CiviliteReservation")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("prv_civilreservation");

                    b.Property<string>("EmailReservation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prv_emailreservation");

                    b.Property<int?>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("prv_idconcessionnaire");

                    b.Property<string>("NomReservation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prv_nomreservation");

                    b.Property<string>("PrenomReservation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prv_prenomreservation");

                    b.Property<string>("TelephoneReservation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("prv_telephonereservation");

                    b.Property<int?>("TypeDePermis")
                        .HasColumnType("integer")
                        .HasColumnName("prv_typedepermis");

                    b.Property<string>("VilleReservation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prv_villereservation");

                    b.HasKey("IdReservationOffre")
                        .HasName("PK_PRISERENDEZVOUS");

                    b.HasIndex("IdConcessionnaire");

                    b.ToTable("t_e_priserendezvous_prv", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Provenance", b =>
                {
                    b.Property<int>("IdCommande")
                        .HasColumnType("integer")
                        .HasColumnName("prv_idcommande")
                        .HasColumnOrder(0);

                    b.Property<int>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("prv_idconcessionnaire")
                        .HasColumnOrder(1);

                    b.HasKey("IdCommande", "IdConcessionnaire")
                        .HasName("PK_PROVENANCE");

                    b.HasIndex("IdConcessionnaire");

                    b.ToTable("t_e_provenance_prv");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.RepriseMoto", b =>
                {
                    b.Property<int>("IdEstimationMoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rpm_idestimationmoto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEstimationMoto"));

                    b.Property<int?>("AnneImmatriculation")
                        .HasColumnType("integer")
                        .HasColumnName("rpm_anneimmatriculation");

                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("rpm_idcompteclient");

                    b.Property<int>("IdDateLivraison")
                        .HasColumnType("integer")
                        .HasColumnName("rpm_iddatelivraison");

                    b.Property<decimal?>("KilometrageEstimationMoto")
                        .HasColumnType("numeric")
                        .HasColumnName("rpm_kilometrageestimationmoto");

                    b.Property<string>("MarqueEstimationMoto")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("rpm_marqueestimationmoto");

                    b.Property<string>("ModeleEstimationMoto")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("rpm_modeleestimationmoto");

                    b.Property<int?>("MoisImmatriculation")
                        .HasColumnType("integer")
                        .HasColumnName("rpm_moisimmatriculation");

                    b.Property<decimal?>("PrixEstimationMoto")
                        .HasColumnType("numeric")
                        .HasColumnName("rpm_prixestimationmoto");

                    b.Property<string>("VersionEstimationMoto")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("rpm_versionestimationmoto");

                    b.HasKey("IdEstimationMoto")
                        .HasName("PK_REPRISEMOTO");

                    b.HasIndex("IdCompteClient");

                    b.HasIndex("IdDateLivraison");

                    b.ToTable("t_e_reprisemoto_rpm");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Reservation", b =>
                {
                    b.Property<int>("IdReservationOffre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("res_idreservationoffre");

                    b.Property<string>("AssuranceReservation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("res_assurancereservation");

                    b.Property<string>("FinancementReservationOffre")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("res_financementreservationoffre");

                    b.Property<int?>("IdConcessionnaire")
                        .HasColumnType("integer")
                        .HasColumnName("res_idconcessionnaire");

                    b.HasKey("IdReservationOffre")
                        .HasName("PK_RESERVATION");

                    b.ToTable("t_e_reservation_res", (string)null);
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Segement", b =>
                {
                    b.Property<int>("IdSegement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seg_idsegement");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSegement"));

                    b.Property<string>("NomSegement")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("seg_nomsegement");

                    b.HasKey("IdSegement")
                        .HasName("PK_SEGEMENT");

                    b.ToTable("t_e_segement_seg");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Stock", b =>
                {
                    b.Property<int>("IdStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("stk_idstock");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStock"));

                    b.HasKey("IdStock")
                        .HasName("PK_STOCK");

                    b.ToTable("t_e_stock_stk");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.TailleEquipement", b =>
                {
                    b.Property<int>("IdTailleEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tel_idtailleequipement");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTailleEquipement"));

                    b.Property<string>("NomTailleEquipement")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tel_nomtailleequipement");

                    b.HasKey("IdTailleEquipement")
                        .HasName("PK_TAILLEEQUIPEMENT");

                    b.ToTable("t_e_tailleequipement_tel");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Transation", b =>
                {
                    b.Property<int>("IdTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tra_idtransaction");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTransaction"));

                    b.Property<int>("IdCompteClient")
                        .HasColumnType("integer")
                        .HasColumnName("tra_idcompteclient");

                    b.Property<decimal>("Montant")
                        .HasColumnType("numeric")
                        .HasColumnName("tra_montant");

                    b.Property<string>("TypeDePayment")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tra_typdepayment");

                    b.Property<string>("TypeDeTransaction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tra_typedetransaction");

                    b.HasKey("IdTransaction")
                        .HasName("PK_TRANSATION");

                    b.HasIndex("IdCompteClient");

                    b.ToTable("t_e_transation_tra");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.TypeEquipement", b =>
                {
                    b.Property<int>("IdTypeEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("typ_idtypeequipement");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTypeEquipement"));

                    b.Property<int?>("IdSurTypeEquipement")
                        .HasColumnType("integer")
                        .HasColumnName("typ_idsurtypeequipement");

                    b.Property<string>("NomTypeEquipement")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("typ_nomtypeequipement");

                    b.HasKey("IdTypeEquipement")
                        .HasName("pk_typeequipement");

                    b.HasIndex("IdSurTypeEquipement");

                    b.ToTable("t_e_typeequipement_typ");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.AChoisi", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.ConfigurationMoto", "ConfigurationMotoChoisi")
                        .WithMany("AChoisiConfigurationMoto")
                        .HasForeignKey("IDConfigurationMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_achoisi_achoisi2_configur");

                    b.HasOne("SAE_API.Models.EntityFramework.Pack", "PackChoisi")
                        .WithMany("ChoisiPack")
                        .HasForeignKey("IDPack")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_achoisi_achoisi_pack");

                    b.Navigation("ConfigurationMotoChoisi");

                    b.Navigation("PackChoisi");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.AChoisiOption", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.ConfigurationMoto", "ConfigurationMotoChoisiOption")
                        .WithMany("AChoisiOptionsConfigurationMoto")
                        .HasForeignKey("IdConfigurationMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_achoisio_achoisiop_configur");

                    b.HasOne("SAE_API.Models.EntityFramework.EquipementMotoOption", "EquipementMotoChoisiOption")
                        .WithMany("AChoisiOptionsEquipementMoto")
                        .HasForeignKey("IdEquipementMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_achoisio_achoisiop_equipeme");

                    b.Navigation("ConfigurationMotoChoisiOption");

                    b.Navigation("EquipementMotoChoisiOption");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Acquerir", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CarteBancaire", "CBAcquis")
                        .WithMany("AcquisCB")
                        .HasForeignKey("IdCb")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_acquerir_acquerir_cartebancaire");

                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "ComptesAcquis")
                        .WithMany("AcquisComptes")
                        .HasForeignKey("IdCompteClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_acquerir_acquerir2_configur");

                    b.Navigation("CBAcquis");

                    b.Navigation("ComptesAcquis");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Adresse", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "ClientAdresse")
                        .WithOne("AdresseCompteClient")
                        .HasForeignKey("SAE_API.Models.EntityFramework.Adresse", "IdCompteClient")
                        .HasConstraintName("fk_adresse_sesitue_comptecl");

                    b.Navigation("ClientAdresse");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.APourCouleur", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CouleurEquipement", "CouleurEquipementAPourCouleur")
                        .WithMany("APourCouleurCouleurEquipement")
                        .HasForeignKey("IdCouleurEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a_pour_c_a_pour_co_couleure");

                    b.HasOne("SAE_API.Models.EntityFramework.Equipement", "EquipementAPourCouleur")
                        .WithMany("APourCouleurEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a_pour_c_a_pour_co_equipeme");

                    b.Navigation("CouleurEquipementAPourCouleur");

                    b.Navigation("EquipementAPourCouleur");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.APourTaille", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Equipement", "EquipementAPourTaille")
                        .WithMany("APourTailleEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a_pour_t_a_pour_ta_equipeme");

                    b.HasOne("SAE_API.Models.EntityFramework.TailleEquipement", "TailleEquipementAPourTaille")
                        .WithMany("APourTailleTailleEquipement")
                        .HasForeignKey("IdTailleEquipement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_a_pour_t_a_pour_ta_tailleeq");

                    b.Navigation("EquipementAPourTaille");

                    b.Navigation("TailleEquipementAPourTaille");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.APourValeur", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CaracteristiqueMoto", "CaracteristiqueMotoPourValeur")
                        .WithMany("APourValeurCaracteristiqueMoto")
                        .HasForeignKey("IdCaracteristiqueMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_apourval_apourvale_caracter");

                    b.HasOne("SAE_API.Models.EntityFramework.Moto", "MotoAPourValeur")
                        .WithMany("APourValeurMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_apourval_apourvale_moto");

                    b.Navigation("CaracteristiqueMotoPourValeur");

                    b.Navigation("MotoAPourValeur");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CaracteristiqueMoto", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CategorieCaracteristiqueMoto", "CategorieCaracteristiqueMotoCaracteristiqueMoto")
                        .WithMany("CaracteristiquesMotoCategorieCaracteristiqueMoto")
                        .HasForeignKey("IdCategorieCaracteristiqueMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_caracter_apourcate_categori");

                    b.Navigation("CategorieCaracteristiqueMotoCaracteristiqueMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Coloris", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Photo", "PhotoColoris")
                        .WithOne("ColorisPhoto")
                        .HasForeignKey("SAE_API.Models.EntityFramework.Coloris", "IdPhoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_e_coloris_col_refleter_photo");

                    b.Navigation("PhotoColoris");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Commander", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.ConfigurationMoto", "ConfigurationMotoCommander")
                        .WithOne("CommanderConfigurationMoto")
                        .HasForeignKey("SAE_API.Models.EntityFramework.Commander", "IdConfigurationMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_commande_commander_configurationmoto");

                    b.HasOne("SAE_API.Models.EntityFramework.Equipement", "EquipementCommander")
                        .WithMany("CommanderEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_commande_commander_equipeme");

                    b.Navigation("ConfigurationMotoCommander");

                    b.Navigation("EquipementCommander");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CompteAdmin", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientCompteAdmin")
                        .WithOne("CompteAdminCompteClient")
                        .HasForeignKey("SAE_API.Models.EntityFramework.CompteAdmin", "IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompteClientCompteAdmin");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CompteClientPrive", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientCompteClientPrive")
                        .WithOne("CompteClientPriveCompteClient")
                        .HasForeignKey("SAE_API.Models.EntityFramework.CompteClientPrive", "IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comptecl_est_un_co_comptecl");

                    b.Navigation("CompteClientCompteClientPrive");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CompteClientProfessionnel", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientCompteClientProfessionnel")
                        .WithOne("CompteClientProfessionnelCompteClient")
                        .HasForeignKey("SAE_API.Models.EntityFramework.CompteClientProfessionnel", "IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comptecl_est_un_co_comptecl");

                    b.Navigation("CompteClientCompteClientProfessionnel");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Concessionnaire", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Adresse", "AdresseConcessionnaire")
                        .WithMany("ConcessionnairesAdresse")
                        .HasForeignKey("IdAdresse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_adresse_situer_concessi");

                    b.HasOne("SAE_API.Models.EntityFramework.Stock", "StockConcessionnaire")
                        .WithMany("ConcessionnaireStock")
                        .HasForeignKey("IdStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_concessi_stocker_stock");

                    b.Navigation("AdresseConcessionnaire");

                    b.Navigation("StockConcessionnaire");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.ConfigurationMoto", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Coloris", "ColorisConfigurationMoto")
                        .WithMany("ConfigurationsMotoColoris")
                        .HasForeignKey("IdColoris")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configur_disponibl_t_e_coloris_col");

                    b.HasOne("SAE_API.Models.EntityFramework.Moto", "MotoConfigurationMoto")
                        .WithMany("ConfigurationMotoMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_configur_estconfig_moto");

                    b.Navigation("ColorisConfigurationMoto");

                    b.Navigation("MotoConfigurationMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.DemanderContact", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.PriseRendezvous", "PriseRendezvousDemanderContact")
                        .WithOne("DemanderContactPriseRendezVous")
                        .HasForeignKey("SAE_API.Models.EntityFramework.DemanderContact", "IdReservationOffre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_demander_heritage__priseren");

                    b.Navigation("PriseRendezvousDemanderContact");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Detient", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Concessionnaire", "ConcessionnaireDetient")
                        .WithMany("DetientConcessionnaire")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_detient_detient2_concessi");

                    b.HasOne("SAE_API.Models.EntityFramework.Equipement", "EquipementDetient")
                        .WithMany("DetientEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_detient_detient_equipement");

                    b.Navigation("ConcessionnaireDetient");

                    b.Navigation("EquipementDetient");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Disposer", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Equipement", "EquipementDisposer")
                        .WithMany("DisposerEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_disposer_disposer2_equipeme");

                    b.HasOne("SAE_API.Models.EntityFramework.Stock", "StockDisposer")
                        .WithMany("DisposerStock")
                        .HasForeignKey("IdStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_disposer_disposer_stock");

                    b.Navigation("EquipementDisposer");

                    b.Navigation("StockDisposer");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Effectuer", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Commande", "CommandeEffectuer")
                        .WithMany("EffectuerCommande")
                        .HasForeignKey("IdCommande")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_e_effectuer_eff_t_e_effectuer_eff_commande");

                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientEffectuer")
                        .WithMany("EffectuerCompteClient")
                        .HasForeignKey("IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_t_e_effectuer_eff_t_e_effectuer_eff2_compte");

                    b.Navigation("CommandeEffectuer");

                    b.Navigation("CompteClientEffectuer");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Enregistrer", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientEnregistrer")
                        .WithMany("EnregistrerCompteClient")
                        .HasForeignKey("IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ENREGISTRER_COMPTECLIENT");

                    b.HasOne("SAE_API.Models.EntityFramework.ConfigurationMoto", "ConfigurationMotoEnregistrer")
                        .WithMany("EnregistrerConfigurationMoto")
                        .HasForeignKey("IdConfigurationMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ENREGISTRER_CONFIGURATIONMOTO");

                    b.Navigation("CompteClientEnregistrer");

                    b.Navigation("ConfigurationMotoEnregistrer");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Equipement", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Collection", "CollectionEquipement")
                        .WithMany("EquipementCollection")
                        .HasForeignKey("IdCollection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EQUIPEMENT_COLLECTION");

                    b.HasOne("SAE_API.Models.EntityFramework.Segement", "SegementEquipement")
                        .WithMany("EquipementSegement")
                        .HasForeignKey("IdSegment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EQUIPEMENT_SEGMENT");

                    b.HasOne("SAE_API.Models.EntityFramework.TypeEquipement", "TypeEquipementEquipement")
                        .WithMany("EquipementTypeEquipement")
                        .HasForeignKey("IdTypeEquipement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EQUIPEMENT_TYPEEQUIPEMENT");

                    b.Navigation("CollectionEquipement");

                    b.Navigation("SegementEquipement");

                    b.Navigation("TypeEquipementEquipement");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EquipementAccessoire", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.EquipementMotoOption", "EquipementMotoOptionEquipementAccessoire")
                        .WithOne("EquipementAccessoireEquipementMotoOption")
                        .HasForeignKey("SAE_API.Models.EntityFramework.EquipementAccessoire", "IdEquipementMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipeme_est_equipeme");

                    b.Navigation("EquipementMotoOptionEquipementAccessoire");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EquipementMotoOption", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Photo", "PhotoEquipementMotoOption")
                        .WithMany("EquipementMotoOptionPhoto")
                        .HasForeignKey("IdPhoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_EQUIPEMENTMOTOOPTION_PHOTO");

                    b.Navigation("PhotoEquipementMotoOption");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EquipementOption", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.EquipementMotoOption", "EquipementMotoOptionEquipementOption")
                        .WithOne("EquipementOptionEquipementMotoOption")
                        .HasForeignKey("SAE_API.Models.EntityFramework.EquipementOption", "IdEquipementMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipeme_est2_equipeme");

                    b.Navigation("EquipementMotoOptionEquipementOption");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EstDans", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Moto", "MotoEstDans")
                        .WithMany("EstDansMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ESTDANS_MOTO");

                    b.HasOne("SAE_API.Models.EntityFramework.Stock", "StockEstDans")
                        .WithMany("EstDansStock")
                        .HasForeignKey("IdStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ESTDANS_STOCK");

                    b.Navigation("MotoEstDans");

                    b.Navigation("StockEstDans");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Estimer", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientEstimer")
                        .WithMany("EstimerCompteClient")
                        .HasForeignKey("IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ESTIMER_COMPTECLIENT");

                    b.HasOne("SAE_API.Models.EntityFramework.RepriseMoto", "RepriseMotoEstimer")
                        .WithOne("EstimerRepriseMoto")
                        .HasForeignKey("SAE_API.Models.EntityFramework.Estimer", "IdEstimationMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ESTIMER_REPRISEMOTO");

                    b.HasOne("SAE_API.Models.EntityFramework.MoyenDePaiement", "MoyenDePaiementEstimer")
                        .WithMany("EstimationMoyenDePaiement")
                        .HasForeignKey("IdMoyenDePaiement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ESTIMER_MOYENDEPAIEMENT");

                    b.Navigation("CompteClientEstimer");

                    b.Navigation("MoyenDePaiementEstimer");

                    b.Navigation("RepriseMotoEstimer");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Favoris", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientFavoris")
                        .WithMany("FavorisCompteClient")
                        .HasForeignKey("IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FAVORIS_COMPTECLIENT");

                    b.HasOne("SAE_API.Models.EntityFramework.Concessionnaire", "ConcessionnaireFavoris")
                        .WithMany("FavorisConcessionnaire")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FAVORIS_CONCESSIONNAIRE");

                    b.Navigation("CompteClientFavoris");

                    b.Navigation("ConcessionnaireFavoris");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Illustrer", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Moto", "MotoIllustrer")
                        .WithMany("IllustrerMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ILLUSTRER_MOTO");

                    b.HasOne("SAE_API.Models.EntityFramework.Photo", "PhotoIllustrer")
                        .WithMany("IllustrerPhoto")
                        .HasForeignKey("IdPhoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ILLUSTRER_PHOTO");

                    b.Navigation("MotoIllustrer");

                    b.Navigation("PhotoIllustrer");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Moto", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.GammeMoto", "GammeMotoMoto")
                        .WithMany("MotoGammeMoto")
                        .HasForeignKey("IdGammeMoto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MOTO_GAMMEMOTO");

                    b.Navigation("GammeMotoMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.MotoDisponible", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Moto", "MotoMotoDisponible")
                        .WithOne("MotoDisponibleMoto")
                        .HasForeignKey("SAE_API.Models.EntityFramework.MotoDisponible", "IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MOTODISPONIBLE_MOTO");

                    b.Navigation("MotoMotoDisponible");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PeutContenir", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Coloris", "ColorisPeutContenir")
                        .WithMany("PeutContenirColoris")
                        .HasForeignKey("IdColoris")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PEUTCONTENIR_COLORIS");

                    b.HasOne("SAE_API.Models.EntityFramework.Moto", "MotoPeutContenir")
                        .WithMany("PeutContenirMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PEUTCONTENIR_MOTO");

                    b.Navigation("ColorisPeutContenir");

                    b.Navigation("MotoPeutContenir");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PeutEquiper", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Moto", "MotoPeutEquiper")
                        .WithMany("PeutEquiperMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PEUTEQUIPER_MOTO");

                    b.HasOne("SAE_API.Models.EntityFramework.Pack", "PackPeutEquiper")
                        .WithMany("PeutEquiperPack")
                        .HasForeignKey("IdPack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PEUTEQUIPER_PACK");

                    b.Navigation("MotoPeutEquiper");

                    b.Navigation("PackPeutEquiper");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PeutUtiliser", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.EquipementMotoOption", "EquipementMotoOptionPeutUtiliser")
                        .WithMany("PeutUtiliserEquipementMotoOption")
                        .HasForeignKey("IdEquipementMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PEUTUTILISER_EQUIPEMENT");

                    b.HasOne("SAE_API.Models.EntityFramework.Pack", "PackPeutUtiliser")
                        .WithMany("PeutUtiliserPack")
                        .HasForeignKey("IdPack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PEUTUTILISER_PACK");

                    b.Navigation("EquipementMotoOptionPeutUtiliser");

                    b.Navigation("PackPeutUtiliser");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Posseder", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.EquipementMotoOption", "EquipementMotoOptionPosseder")
                        .WithMany("PossederEquipementMotoOption")
                        .HasForeignKey("IdEquipementMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_POSSEDER_EQUIPEMENTMOTOOPTION");

                    b.HasOne("SAE_API.Models.EntityFramework.Moto", "MotoPosseder")
                        .WithMany("PossederMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_POSSEDER_MOTO");

                    b.Navigation("EquipementMotoOptionPosseder");

                    b.Navigation("MotoPosseder");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Presente", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CouleurEquipement", "CouleurEquipementPresente")
                        .WithMany("PresenteCouleurEquipement")
                        .HasForeignKey("IdCouleurEquipement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PRESENTE_COULEUREQUIPEMENT");

                    b.HasOne("SAE_API.Models.EntityFramework.Equipement", "EquipementPresente")
                        .WithMany("PresenteEquipement")
                        .HasForeignKey("IdEquipement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PRESENTE_EQUIPEMENT");

                    b.HasOne("SAE_API.Models.EntityFramework.Photo", "PhotoPresente")
                        .WithMany("PresentePhoto")
                        .HasForeignKey("IdPhoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PRESENTE_PHOTO");

                    b.Navigation("CouleurEquipementPresente");

                    b.Navigation("EquipementPresente");

                    b.Navigation("PhotoPresente");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PriseRendezvous", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Concessionnaire", "ConcessionnairePriseRendezvous")
                        .WithMany("PriseRendezvousConcessionnaire")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_PRISERENDEZVOUS_CONCESSIONNAIRE");

                    b.Navigation("ConcessionnairePriseRendezvous");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Provenance", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.Commande", "CommandeProvenance")
                        .WithMany("ProvenanceCommande")
                        .HasForeignKey("IdCommande")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PROVENANCE_COMMANDE");

                    b.HasOne("SAE_API.Models.EntityFramework.Concessionnaire", "ConcessionnaireProvenance")
                        .WithMany("ProvenanceConcessionnaire")
                        .HasForeignKey("IdConcessionnaire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PROVENANCE_CONCESSIONNAIRE");

                    b.Navigation("CommandeProvenance");

                    b.Navigation("ConcessionnaireProvenance");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.RepriseMoto", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientRepriseMoto")
                        .WithMany("RepriseMotoCompteClient")
                        .HasForeignKey("IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_REPRISEMOTO_COMPTECLIENT");

                    b.HasOne("SAE_API.Models.EntityFramework.DateLivraison", "DateLivraisonRepriseMoto")
                        .WithMany("RepriseMotoDateLivraison")
                        .HasForeignKey("IdDateLivraison")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_REPRISEMOTO_DATELIVRAISON");

                    b.Navigation("CompteClientRepriseMoto");

                    b.Navigation("DateLivraisonRepriseMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Reservation", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.PriseRendezvous", "PriseRendezvousReservation")
                        .WithOne("ReservationPriseRendezvous")
                        .HasForeignKey("SAE_API.Models.EntityFramework.Reservation", "IdReservationOffre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservat_heritage__priseren");

                    b.Navigation("PriseRendezvousReservation");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Transation", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.CompteClient", "CompteClientTransation")
                        .WithMany("TransationCompteClient")
                        .HasForeignKey("IdCompteClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TRANSATION_COMPTECLIENT");

                    b.Navigation("CompteClientTransation");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.TypeEquipement", b =>
                {
                    b.HasOne("SAE_API.Models.EntityFramework.TypeEquipement", "TypeEquipements")
                        .WithMany("TypeEquipementTypeEquipement")
                        .HasForeignKey("IdSurTypeEquipement")
                        .HasConstraintName("fk_typeequipement_surtypeequipement");

                    b.Navigation("TypeEquipements");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Adresse", b =>
                {
                    b.Navigation("ConcessionnairesAdresse");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CaracteristiqueMoto", b =>
                {
                    b.Navigation("APourValeurCaracteristiqueMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CarteBancaire", b =>
                {
                    b.Navigation("AcquisCB");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CategorieCaracteristiqueMoto", b =>
                {
                    b.Navigation("CaracteristiquesMotoCategorieCaracteristiqueMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Collection", b =>
                {
                    b.Navigation("EquipementCollection");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Coloris", b =>
                {
                    b.Navigation("ConfigurationsMotoColoris");

                    b.Navigation("PeutContenirColoris");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Commande", b =>
                {
                    b.Navigation("EffectuerCommande");

                    b.Navigation("ProvenanceCommande");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CompteClient", b =>
                {
                    b.Navigation("AcquisComptes");

                    b.Navigation("AdresseCompteClient")
                        .IsRequired();

                    b.Navigation("CompteAdminCompteClient")
                        .IsRequired();

                    b.Navigation("CompteClientPriveCompteClient")
                        .IsRequired();

                    b.Navigation("CompteClientProfessionnelCompteClient")
                        .IsRequired();

                    b.Navigation("EffectuerCompteClient");

                    b.Navigation("EnregistrerCompteClient");

                    b.Navigation("EstimerCompteClient");

                    b.Navigation("FavorisCompteClient");

                    b.Navigation("RepriseMotoCompteClient");

                    b.Navigation("TransationCompteClient");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Concessionnaire", b =>
                {
                    b.Navigation("DetientConcessionnaire");

                    b.Navigation("FavorisConcessionnaire");

                    b.Navigation("PriseRendezvousConcessionnaire");

                    b.Navigation("ProvenanceConcessionnaire");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.ConfigurationMoto", b =>
                {
                    b.Navigation("AChoisiConfigurationMoto");

                    b.Navigation("AChoisiOptionsConfigurationMoto");

                    b.Navigation("CommanderConfigurationMoto")
                        .IsRequired();

                    b.Navigation("EnregistrerConfigurationMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.CouleurEquipement", b =>
                {
                    b.Navigation("APourCouleurCouleurEquipement");

                    b.Navigation("PresenteCouleurEquipement");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.DateLivraison", b =>
                {
                    b.Navigation("RepriseMotoDateLivraison");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Equipement", b =>
                {
                    b.Navigation("APourCouleurEquipement");

                    b.Navigation("APourTailleEquipement");

                    b.Navigation("CommanderEquipement");

                    b.Navigation("DetientEquipement");

                    b.Navigation("DisposerEquipement");

                    b.Navigation("PresenteEquipement");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.EquipementMotoOption", b =>
                {
                    b.Navigation("AChoisiOptionsEquipementMoto");

                    b.Navigation("EquipementAccessoireEquipementMotoOption")
                        .IsRequired();

                    b.Navigation("EquipementOptionEquipementMotoOption")
                        .IsRequired();

                    b.Navigation("PeutUtiliserEquipementMotoOption");

                    b.Navigation("PossederEquipementMotoOption");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.GammeMoto", b =>
                {
                    b.Navigation("MotoGammeMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Moto", b =>
                {
                    b.Navigation("APourValeurMoto");

                    b.Navigation("ConfigurationMotoMoto");

                    b.Navigation("EstDansMoto");

                    b.Navigation("IllustrerMoto");

                    b.Navigation("MotoDisponibleMoto")
                        .IsRequired();

                    b.Navigation("PeutContenirMoto");

                    b.Navigation("PeutEquiperMoto");

                    b.Navigation("PossederMoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.MoyenDePaiement", b =>
                {
                    b.Navigation("EstimationMoyenDePaiement");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Pack", b =>
                {
                    b.Navigation("ChoisiPack");

                    b.Navigation("PeutEquiperPack");

                    b.Navigation("PeutUtiliserPack");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Photo", b =>
                {
                    b.Navigation("ColorisPhoto")
                        .IsRequired();

                    b.Navigation("EquipementMotoOptionPhoto");

                    b.Navigation("IllustrerPhoto");

                    b.Navigation("PresentePhoto");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.PriseRendezvous", b =>
                {
                    b.Navigation("DemanderContactPriseRendezVous")
                        .IsRequired();

                    b.Navigation("ReservationPriseRendezvous")
                        .IsRequired();
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.RepriseMoto", b =>
                {
                    b.Navigation("EstimerRepriseMoto")
                        .IsRequired();
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Segement", b =>
                {
                    b.Navigation("EquipementSegement");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.Stock", b =>
                {
                    b.Navigation("ConcessionnaireStock");

                    b.Navigation("DisposerStock");

                    b.Navigation("EstDansStock");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.TailleEquipement", b =>
                {
                    b.Navigation("APourTailleTailleEquipement");
                });

            modelBuilder.Entity("SAE_API.Models.EntityFramework.TypeEquipement", b =>
                {
                    b.Navigation("EquipementTypeEquipement");

                    b.Navigation("TypeEquipementTypeEquipement");
                });
#pragma warning restore 612, 618
        }
    }
}
